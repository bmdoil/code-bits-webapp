components:
  schemas:
    admin:
      properties:
        email:
          example: admin@admin.com
          type: string
        password:
          example: admin
          type: string
    admin-full:
      properties:
        email:
          example: admin@admin.com
          type: string
        password:
          example: admin
          type: string
        username:
          example: admin
          type: string
    question:
      properties:
        body:
          example: Define a function called sum
          type: string
        difficulty:
          example: easy
          type: string
        test_code:
          example: sum(2, 2)
          type: string
        test_solution:
          example: 4
          type: integer
    score:
      properties:
        correct:
          example: false
          type: boolean
        points:
          example: 5
          type: integer
        runtime:
          example: 2
          type: integer
    user:
      properties:
        email:
          example: user@user.com
          type: string
        password:
          example: user
          type: string
    user-full:
      properties:
        email:
          example: user@user.com
          type: string
        password:
          example: user
          type: string
        username:
          example: user
          type: string
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
info:
  description: This is the API documentation for Brent Doil's OSU CS493 Final
  title: Code-Bites REST API Documentation
  version: 0.0.1
openapi: 3.0.2
paths:
  /login/login:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin'
        description: User to log in
        required: true
      responses:
        200:
          description: Logs user in and returns JWT for authentication
        400:
          description: Invalid payload
        404:
          description: Username or password incorrect or User not found
        406:
          description: invalid content-type
        500:
          description: Server error
      summary: Logs a user in
  /login/me:
    get:
      responses:
        200:
          description: user object
        401:
          description: Not authenticated. Please log in
      security:
      - bearerAuth: []
      summary: Returns the logged in user's profile
  /login/register:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-full'
        description: User to add
        required: true
      responses:
        201:
          description: user object
        400:
          description: Invalid payload
        406:
          description: invalid content-type
      summary: Creates a new user. Copy the token in the response. Click the Authorize
        button at the top and paste the token to authorize your session.
  /login/signout:
    get:
      responses:
        200:
          description: Signs a user out
      security:
      - bearerAuth: []
      summary: Signs a user out. This only works client side, the server can't delete
        your JWT stored in broswer cache. Click the signout button on the navbar to
        test
  /question/{question_id}/user/{user_id}:
    delete:
      parameters:
      - description: ID of question to fetch
        in: path
        name: question_id
        required: true
        schema:
          format: int64
          type: integer
      - description: ID of user who owns (created) the question
        in: path
        name: user_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        204:
          description: Question deleted
        403:
          description: Not authorized to delete this question
        404:
          description: Question does not exist
        406:
          description: invalid content-type
      security:
      - bearerAuth: []
      summary: Deletes the question
    get:
      parameters:
      - description: ID of question to fetch
        in: path
        name: question_id
        required: true
        schema:
          format: int64
          type: integer
      - description: ID of user who owns (created) the question
        in: path
        name: user_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          description: Question object
        403:
          description: Not authorized to view this question
        404:
          description: Question does not exist
        406:
          description: invalid content-type
      security:
      - bearerAuth: []
      summary: Returns the user's question by question_id
    put:
      parameters:
      - description: ID of question to fetch
        in: path
        name: question_id
        required: true
        schema:
          format: int64
          type: integer
      - description: ID of user who owns (created) the question
        in: path
        name: user_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/question'
        description: Question to update
        required: true
      responses:
        201:
          description: Question object
        403:
          description: Not authorized to update this question
        404:
          description: Question does not exist
        406:
          description: invalid content-type
      security:
      - bearerAuth: []
      summary: Updates the question and returns the updated question object
  /questions:
    get:
      responses:
        200:
          description: List of question objects
        403:
          description: You must be signed in to view all questions
      security:
      - bearerAuth: []
      summary: Returns all questions. Only admin users can view this route.
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/question'
        description: Question to add
        required: true
      responses:
        201:
          description: Question added
        400:
          description: Invalid payload
        403:
          description: Not authorized to create a question
        406:
          description: invalid content-type
      security:
      - bearerAuth: []
      summary: Adds a new question
  /questions/user:
    get:
      responses:
        200:
          description: List of question objects
        403:
          description: You must be signed in to view your questions
      security:
      - bearerAuth: []
      summary: Returns all questions by the authenticated user
  /users:
    get:
      responses:
        200:
          description: user object
        403:
          description: You must be signed in as an admin to view all users
      security:
      - bearerAuth: []
      summary: Returns all users
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-full'
        description: User to add
        required: true
      responses:
        201:
          description: User added
        400:
          description: Invalid payload
        403:
          description: Not authorized to create a user
        406:
          description: invalid content-type
      security:
      - bearerAuth: []
      summary: Adds a new user
  /users/ping:
    get:
      responses:
        200:
          description: Will return 'pong!'
      summary: Sanity check
  /users/{id}:
    delete:
      parameters:
      - description: ID of user to fetch
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        204:
          description: user deleted
        403:
          description: Not authorized to delete this user
        404:
          description: User does not exist
        406:
          description: invalid content-type
      security:
      - bearerAuth: []
      summary: Deletes the user
    get:
      parameters:
      - description: ID of user to fetch
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          description: user object
        403:
          description: Not authorized to view this user
        404:
          description: User does not exist
        406:
          description: invalid content-type
      security:
      - bearerAuth: []
      summary: Returns a user based on a single user ID
    put:
      parameters:
      - description: ID of user to fetch
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        description: User to update
        required: true
      responses:
        201:
          description: user object
        403:
          description: Not authorized to update this user
        404:
          description: User does not exist
        406:
          description: invalid content-type
      security:
      - bearerAuth: []
      summary: Updates the user and returns the updated user object
servers:
- url: http://app.brentdoil.com
