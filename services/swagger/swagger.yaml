components:
  schemas:
    user:
      properties:
        email:
          type: string
          example: user@user.com
        password:
          type: string
          example: user
    user-full:
      properties:
        email:
          type: string
          example: user@user.com
        password:
          type: string
          example: user
        username:
          type: string
          example: user
    admin:
      properties:
        email:
          type: string
          example: admin@admin.com
        password:
          type: string
          example: admin
    admin-full:
      properties:
        email:
          type: string
          example: admin@admin.com
        password:
          type: string
          example: admin
        username:
          type: string
          example: admin
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
info:
  description: This is the API documentation for Brent Doil's OSU CS493 Final
  title: Code-Bites REST API Documentation
  version: 0.0.1
openapi: 3.0.2
paths:
  /login/register:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-full'
        description: User to add
        required: true
      responses:
        201:
          description: user object
        400:
          description: Invalid payload
        406:
          description: invalid content-type
      summary: Creates a new user. Copy the token in the response. Click the Authorize button at the top and paste the token to authorize your session. 
  /login/login:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        description: User to log in
        required: true
      responses:
        200:
          description: Logs user in and returns JWT for authentication
        400:
          description: Invalid payload
        404:
          description: Username or password incorrect or User not found
        406:
          description: invalid content-type
        500:
          description: Server error
      summary: Logs a user in
  /login/me:
    get:
      responses:
        200:
          description: user object
        401:
          description: Not authenticated. Please log in
      security:
      - bearerAuth: []
      summary: Returns the logged in user's profile
  /login/signout:
    get:
      responses:
        200:
          description: Signs a user out
      security:
      - bearerAuth: []
      summary: Signs a user out. This only works client side, the server can't delete your JWT stored in broswer cache. Click the signout button on the navbar to test
  /users:
    get:
      responses:
        200:
          description: user object
        403:
          description: 'You must be signed in as an admin to view all users'
      security:
      - bearerAuth: []
      summary: Returns all users
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-full'
        description: User to add
        required: true
      responses:
        201:
          description: User added
        400:
          description: Invalid payload
        403:
          description: Not authorized to create a user
        406:
          description: invalid content-type
      security:
      - bearerAuth: []
      summary: Adds a new user
  /users/ping:
    get:
      responses:
        200:
          description: Will return 'pong!'
      summary: Sanity check
  /users/{id}:
    delete:
      parameters:
      - description: ID of user to fetch
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        204:
          description: user deleted
        403:
          description: Not authorized to delete this user
        404:
          description: User does not exist
        406:
          description: invalid content-type
      security:
      - bearerAuth: []
      summary: Deletes the user
    get:
      parameters:
      - description: ID of user to fetch
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        200:
          description: user object
        403:
          description: Not authorized to view this user
        404:
          description: User does not exist
        406:
          description: invalid content-type
      security:
      - bearerAuth: []
      summary: Returns a user based on a single user ID
    put:
      parameters:
      - description: ID of user to fetch
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        description: User to update
        required: true
      responses:
        201:
          description: user object
        403:
          description: Not authorized to update this user
        404:
          description: User does not exist
        406:
          description: invalid content-type
      security:
      - bearerAuth: []
      summary: Updates the user and returns the updated user object
servers:
  - url: http://localhost
