info:
  version: 0.0.1
  description: Swagger spec for documenting the users service
  title: Users Service
paths:
  /login/signout:
    get:
      security:
        - bearerAuth: []
      responses:
        200:
          description: Signs a user out
        403:
          description: User not logged in
      summary: Signs a user out
  /login/register:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-full'
        required: true
        description: User to add
      responses:
        201:
          description: user object
        400:
          description: Invalid payload
        406:
          description: invalid content-type
      summary: Creates a new user
  /users/ping:
    get:
      responses:
        200:
          description: Will return 'pong!'
      summary: Sanity check
  /login/login:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        required: true
        description: User to log in
      responses:
        200:
          description: Logs user in and returns JWT for authentication
        400:
          description: Invalid payload
        404:
          description: Username or password incorrect
        406:
          description: invalid content-type
        500:
          description: Server error
      summary: Logs a user in
  /login/me:
    get:
      security:
        - bearerAuth: []
      responses:
        '200':
          description: user object
        '401':
          description: Not authenticated. Please log in
      summary: Returns the logged in user's profile
  /users/{id}:
    get:
      security:
        - bearerAuth: []
      responses:
        200:
          description: user object
        403:
          description: Not authorized to view this user
        404:
          description: User does not exist
        406:
          description: invalid content-type
      parameters:
        - required: true
          in: path
          description: ID of user to fetch
          name: id
          schema:
            type: integer
            format: int64
      summary: Returns a user based on a single user ID
    put:
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        required: true
        description: User to update
      responses:
        201:
          description: user object
        403:
          description: Not authorized to update this user
        404:
          description: User does not exist
        406:
          description: invalid content-type
      parameters:
        - required: true
          in: path
          description: ID of user to fetch
          name: id
          schema:
            type: integer
            format: int64
      summary: Updates the user and returns the updated user object
    delete:
      security:
        - bearerAuth: []
      responses:
        204:
          description: user deleted
        403:
          description: Not authorized to delete this user
        404:
          description: User does not exist
        406:
          description: invalid content-type
      parameters:
        - required: true
          in: path
          description: ID of user to fetch
          name: id
          schema:
            type: integer
            format: int64
      summary: Deletes the user
  /users:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-full'
        required: true
        description: User to add
      security:
        - bearerAuth: []
      responses:
        201:
          description: User added
        400:
          description: Invalid payload
        403:
          description: Not authorized to create a user
        406:
          description: invalid content-type
      summary: Adds a new user
    get:
      responses:
        200:
          description: user object
        403:
          description: 'Not authorized to view all users: must be admin'
      security:
        - bearerAuth: []
      summary: Returns all users
openapi: 3.0.2
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    user:
      properties:
        email:
          type: string
        password:
          type: string
    user-full:
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
servers:
  - url: 'http://localhost'
